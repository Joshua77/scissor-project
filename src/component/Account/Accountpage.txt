import React from "react";
import { useState, useEffect, Fragment, useCallback, useMemo } from "react";

//I am not using all the MATERIAL UI COMPONENTS HERE, JUST TYPING IT OUT FIRST
import {
  Grid,
  Box,
  Typography,
  CircularProgress,
  Divider,
  Snackbar,
  Button,
} from "@mui/material";

//I need the Navbar, LinkCard (link dashboard), Nanoid, LinkShortenerModal (the real operation center)
import NavBar from "./NavBarAuth.jsx";
import LinkCard from "./LinkCard.jsx";
import ShortenURLBox from "./ShortenURLBox.jsx";
import { app, db, auth } from "../../utils/init-firebase.js";
import {
  collection,
  doc,
  addDoc,
  getDocs,
  updateDoc,
  serverTimestamp,
  deleteDoc,
} from "firebase/firestore";
import { nanoid } from "nanoid";
import copy from "copy-to-clipboard";

export default function Accountpage () {
  const [openModal, setOpenModal] = useState(false); //the shortenurl modal will not open until we say so
  //when we login, we should start loading any available links previously created
  const [gettingLinks, setGettingLinks] = useState(true);
  //newlinktoastr - message display
  const [newLinkToastr, setNewLinkToastr] = useState(false);
  //the links array is set to empty initially
  const [links, setLinks] = useState([]);

  const userUid = auth.currentUser.uid;
  const linksPathRef = useMemo(
    () => collection(doc(db, "users", userUid), "links"),
    [userUid]
  );

  //THE HANDLER FUNCTIONS WILLBE HERE
  //CreateShortLink Handler

  //check of the name is supposed to take a comma or colon or semicolon and
  //that of the Long url too

  const handleCreateLink = async (name, longURL) => {
    const link = {
      name,
      longURL:
        longURL.includes("https://") || longURL.includes("http://")
          ? longURL
          : `http://${longURL}`,
      createdAt: serverTimestamp(),
      shortCode: nanoid(6),
      totalClicks: 0,
    };

    try {
      const resp = await addDoc(linksPathRef, link);
      setLinks((links) => [
        ...links,
        { ...link, createdAt: new Date(), id: resp.id },
      ]);
      setOpenModal(false);
    } catch (error) {
      console.error("Error creating link:", error);
    }
  };

  useEffect(() => {
    const gettingLinks = async () => {
      try {
        const snapshot = await getDocs(linksPathRef);
        const tempLinks = snapshot.docs.map((doc) => ({
          ...doc.data(),
          id: doc.id,
          createdAt: doc.data().createdAt.toDate(),
        }));
        setLinks(tempLinks);
        setGettingLinks(false);
      } catch (error) {
        console.error("Error getting links:", error);
      }
    };

    gettingLinks();
  }, [linksPathRef]);

  const handleDeleteLink = useCallback(
    async (linkDocID) => {
      if (window.confirm("Do you want to delete the link?")) {
        try {
          await deleteDoc(doc(linksPathRef, linkDocID));
          setLinks((oldLinks) =>
            oldLinks.filter((link) => link.id !== linkDocID)
          );
        } catch (error) {
          console.error("Error deleting link:", error);
        }
      }
    },
    [linksPathRef]
  );

  const handleCopyLink = useCallback((shortUrl) => {
    copy(shortUrl);
    setNewLinkToastr(true);
  }, []);

  return (
    <>
      <Snackbar
        open={newLinkToastr}
        onClose={() => setNewLinkToastr(false)}
        autoHideDuration={2000}
        message="link copied to clipboard"
      />
      {openModal && (
        <ShortenURLBox
          createShortenLink={handleCreateLink}
          handleClose={() => setOpenModal(false)}
        />
      )}
      <NavBar />
      <div>Links</div>
      <button onClick={() => setOpenModal(true)}> Create New </button>

      {gettingLinks ? (
        <div className="circular-progress">
          <CircularProgress />
        </div>
      ) : !links.length ? (
        <div className="center-nolinkimg">
          <img
            style={{
              width: "225px",
              height: "auto",
              marginBottom: "24px",
            }}
            src="/assets/no_links.svg"
            alt="no links"
          />
          <h3>You have no links</h3>
        </div>
      ) : (
        links
          .sort((prevLink, nextLink) => nextLink.createdAt - prevLink.createdAt)
          .map((link, idx) => (
            <Fragment key={link.id}>
              <LinkCard
                {...link}
                deleteLink={handleDeleteLink}
                copyLink={handleCopyLink}
              />
              {idx !== links.length - 1 && (
                <Box my={4}>
                  <Divider />
                </Box>
              )}
            </Fragment>
          ))
      )}
    </>
  );
};


