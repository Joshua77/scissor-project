import React, { useState, useEffect, Fragment, useCallback, useMemo } from "react";
import { Grid, Box, Typography, CircularProgress, Divider, Snackbar, Button } from "@mui/material";
import { initializeApp } from "firebase/app";
import { getFirestore, collection, doc, addDoc, getDocs, deleteDoc, serverTimestamp } from "firebase/firestore";
import { getAuth } from "firebase/auth";
import { nanoid } from "nanoid";
import copy from "copy-to-clipboard";

// Initialize Firebase
const firebaseConfig = {
  // Add your Firebase config here
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

const Account = () => {
  const [openModal, setOpenModal] = useState(false);
  const [gettingLinks, setGettingLinks] = useState(true);
  const [newLinkToastr, setNewLinkToastr] = useState(false);
  const [links, setLinks] = useState([]);

  const userUid = auth.currentUser.uid;
  const linksPathRef = useMemo(() => collection(db, "users", userUid, "links"), [db, userUid]);

  const handleCreateLink = async (name, longURL) => {
    const link = {
      name,
      longURL: longURL.includes("https://") || longURL.includes("http://") ? longURL : `http://${longURL}`,
      createdAt: serverTimestamp(),
      shortCode: nanoid(6),
      totalClicks: 0,
    };

    const resp = await addDoc(linksPathRef, link);

    setLinks((links) => [
      ...links,
      { ...link, createdAt: new Date(), id: resp.id },
    ]);
    setOpenModal(false);
  };

  useEffect(() => {
    const gettingLinks = async () => {
      const snapshot = await getDocs(linksPathRef);
      const tempLinks = [];
      snapshot.forEach((doc) =>
        tempLinks.push({
          ...doc.data(),
          id: doc.id,
          createdAt: doc.data().createdAt.toDate(),
        })
      );
      setLinks(tempLinks);
      setGettingLinks(false);
    };

    gettingLinks();
  }, [linksPathRef]);

  const handleDeleteLink = useCallback(
    async (linkDocID) => {
      if (window.confirm("Do you want to delete the link?")) {
        await deleteDoc(doc(linksPathRef, linkDocID));

        setLinks((oldLinks) =>
          oldLinks.filter((link) => link.id !== linkDocID)
        );
      }
    },
    [linksPathRef]
  );

  const handleCopyLink = useCallback((shortUrl) => {
    copy(shortUrl);
    setNewLinkToastr(true);
  }, []);

  return (
    <>
      <Snackbar
        open={newLinkToastr}
        onClose={() => setNewLinkToastr(false)}
        autoHideDuration={2000}
        message="link copied to clipboard"
      />
      {openModal && (
        <ShortenURLBox
          createShortenLink={handleCreateLink}
          handleClose={() => setOpenModal(false)}
        />
      )}
      <NavBar />
      <div>Links</div>
      <button onClick={() => setOpenModal(true)}> Create New </button>

      {gettingLinks ? (
        <div className="circular-progress">
          <CircularProgress />
        </div>
      ) : !links.length ? (
    <div className="center-nolinkimg">
      <img
        style={{
          width: "225px",
          height: "auto",
          marginBottom: "24px",
        }}
        src="/assets/no_links.svg"
        alt="no links"
      />
      <h3>You have no links</h3>
    </div>
  ) : (
    links
      .sort((prevLink, nextLink) => nextLink.createdAt - prevLink.createdAt)
      .map((link, idx) => (
        <Fragment key={link.id}>
          <LinkCard
            {...link}
            deleteLink={handleDeleteLink}
            copyLink={handleCopyLink}
          />
          {idx !== links.length - 1 && (
            <Box my={4}>
              <Divider />
            </Box>
          )}
        </Fragment>
      ))
  )}
</>
);
};

export default Account;
